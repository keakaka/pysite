- 기본적으로 장고 프로젝트 한 개당 하나의 DB를 사용한다.
- 장고 프로젝트에는 기본적으로 관리 프로그램이 내장되기 때문이다.
- postgresql에 db 생성 및 계정 생성 및 접근권한 부여
1. create database pysite;
2. create user pysite with password 'pysite';
3. grant all privileges on all tables in schema public to pysite;
4. data/pg_hba.conf 접근 설정

- pycharm(community) 에서 Django 프로젝트 시작하기 -
1. pycharm 프로젝트 생성(python_ch3 프로젝트)

2. Django 설치
   [터미널]
   pip install django

3. 장고 프로젝트 생성
   [터미널]
   django-admin startproject pysite

4. 디렉토리 정리
   -> pycharm 프로젝트와 django 프로젝트의 디렉토리를 일치시키는 작업
   파이참 프로젝트 내에 쟝고를 설치했기 때문에
   내부 venv에 쟝고를 설치하게 되고, 장고 프로젝트 생성 시 해당 프로젝트 안에
   같은 환경의 장고프로젝트가 새로 만들어진다.(python3.7 lib에 설치해서 끌어오기도 가능)
   그래서 디렉토리를 정리하기 위해선
   ###
   manage.py -> 최상위 프로젝트로 이동
   프로젝트 내부 py -> 차상위 프로젝트로 이동
   최하단 프로젝트는 비어있기 때문에 삭제.
   ###

5. psycopg2(postgres db lib)설치
   [터미널]
   pip install psycopg2

6. setting.py 설정
   1) TIME_ZONE = 'Asia/Seoul'
   2) DATABASES = {
      'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'pysite',
        'USER': 'pysite',
        'PASSWORD': 'pysite',
        'HOST': '192.168.1.236',
        'PORT': 5432
      }
    }
   3) TEMPLATE DIR 설정
        3. Template 디렉토리 설정
           TEMPLATES = [
           ...
           'DIRS': [os.path.join(BASE_DIR, 'templates')]
           ]
   4. STATIC 디렉토리 설정 및 url 매핑 (settings.py)
        STATICFILES_DIRS = (os.path.join(BASE_DIR, 'statics'),)  스태틱으로 설정 할 디렉토리 지정
        STATIC_URL = '/assets/'  -> 스태틱 디렉토리 내 폴더 매핑


7. 장고 프로젝트의 기본 관리 어플리케이션이 사용하는 테이블 생성
   (기본 관리 App의 Database 생성 및 동기화)
   [터미널]
   python manage.py migrate

8. 장고 프로젝트의 기본 관리 어플리케이션 접속계정 생성(관리 계정)
   [터미널]
   python manage.py createsuperuser

9. 지금까지의 작업 내용 확인
   [터미널]
   python manage.py runserver 0.0.0.0:8888


=================================================================

Application 작업
    1) helloworld
        1. 어플리케이션 추가
           [터미널]
           python manage.py startapp helloworld

        2. 어플리케이션 등록(settings.py)
            INSTALLED_APPS = [
                'helloworld'
                ...
                ...
            ]

        3. templates
                |----- helloworld
            어플리케이션 templates 디렉토리 생성

        4. Model 정의(생략)
        5. urls.py -> url <---> view의 handler mapping
        6. views.py에서 핸들러 함수 추가 구현(요청처리, 모델작업{비즈니스}, 응답처리 등)
            (def hello(request):
                return render(request, 'helloworld/hello.html')
        7. 혹시 화면이 필요한 경우, 해당 템플릿 작업.

    2) user
        1. 어플리케이션 추가
           [터미널]
           python manage.py startapp emaillist

        2. 어플리케이션 등록(settings.py)
            INSTALLED_APPS = [
                'emaillist'
                ...
                ...
            ]

        3. templates
                |----- emaillist
            어플리케이션 templates 디렉토리 생성

        4-1. Model 정의 (모델 수정 시 4-4까지 작업 필수로 진행 할 것)
        4-2. admin.py에
             admin.site.register(Emaillist)
        4-3. migrations 이름의 DDL python 모듈 생성
             python manage.py makemigrations
        4-4. 물리 DB와 스키마 동기화 - python manage.py migrate

        5. urls.py -> url <---> view의 handler mapping
        6. views.py에서 핸들러 함수 추가 구현(요청처리, 모델작업{비즈니스}, 응답처리 등)
            (def hello(request):
                return render(request, 'helloworld/hello.html')
        7. 혹시 화면이 필요한 경우, 해당 템플릿 작업.
